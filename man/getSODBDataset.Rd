% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataset_helpers.R
\name{getSODBDataset}
\alias{getSODBDataset}
\title{getSODBDataset}
\usage{
getSODBDataset(
  dataset_name = NULL,
  experiment_name = "default",
  env_name = NULL
)
}
\arguments{
\item{dataset_name}{name of dataset for which experiment names will be listed.
Must exist within the SODB.}

\item{experiment_name}{name of one experiment associated with `dataset_name`
By default, the first experiment will be used.}

\item{env_name}{Calls [GiottoClass::set_giotto_python_path()]. Path to
python binary to use or envname. Leaving as `NULL` will use the default.}
}
\description{
getSODBDataset
}
\details{
Interface with the Spatial Omics DataBase (SODB) using the
python extension, pysodb, from TenCent.

This function will write an anndata h5ad file for a provided dataset
name to the current working directory and will then  convert
the h5ad into a Giotto Object.

Run \preformatted{listSODBDatasetNames()} to find names of SODB datasets.
Run \preformatted{listSODBDatasetExperimentNames()} to find names of
experiments associate with a provided dataset.

This function will not run if pysodb is not installed in
the active conda environment. It will prompt the user to install
pysodb automatically if it is not detected.

*Note that manual installation is more stable.*
To install manually within the giotto environment, follow the steps below:

1. Run \preformatted{checkGiottoEnvironment()} in R to find
the installation location of the Giotto conda environment.

2. Open a terminal.

3. Clone the source code and change into the pysodb directory.

\preformatted{
  git clone https://github.com/TencentAILabHealthcare/pysodb.git
  cd pysodb
}

4. Activate the giotto environment.

\preformatted{conda activate your/path/to/giotto_env}

5. Install pysodb as a dependency or third-party package with pip:

\preformatted{pip install .}
}
\examples{
\dontrun{

sodb_dataset_names = listSODBDatasetNames()
desired_dataset = sodb_dataset_names[[15]] # Arbitrary

dataset_experiment_names = listSODBDatasetExperimentNames(dataset_name = desired_dataset)
desired_experiment = dataset_experiment_names[[1]] # Arbitrary

gobject = getSODBDataset(dataset_name = desired_dataset,
                         experiment_name = desired_experiment)}
}
